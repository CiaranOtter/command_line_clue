// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/clue.proto

package comm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClueService_GameStream_FullMethodName = "/ClueService/GameStream"
)

// ClueServiceClient is the client API for ClueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClueServiceClient interface {
	GameStream(ctx context.Context, opts ...grpc.CallOption) (ClueService_GameStreamClient, error)
}

type clueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClueServiceClient(cc grpc.ClientConnInterface) ClueServiceClient {
	return &clueServiceClient{cc}
}

func (c *clueServiceClient) GameStream(ctx context.Context, opts ...grpc.CallOption) (ClueService_GameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClueService_ServiceDesc.Streams[0], ClueService_GameStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clueServiceGameStreamClient{stream}
	return x, nil
}

type ClueService_GameStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type clueServiceGameStreamClient struct {
	grpc.ClientStream
}

func (x *clueServiceGameStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clueServiceGameStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClueServiceServer is the server API for ClueService service.
// All implementations must embed UnimplementedClueServiceServer
// for forward compatibility
type ClueServiceServer interface {
	GameStream(ClueService_GameStreamServer) error
	mustEmbedUnimplementedClueServiceServer()
}

// UnimplementedClueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClueServiceServer struct {
}

func (UnimplementedClueServiceServer) GameStream(ClueService_GameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GameStream not implemented")
}
func (UnimplementedClueServiceServer) mustEmbedUnimplementedClueServiceServer() {}

// UnsafeClueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClueServiceServer will
// result in compilation errors.
type UnsafeClueServiceServer interface {
	mustEmbedUnimplementedClueServiceServer()
}

func RegisterClueServiceServer(s grpc.ServiceRegistrar, srv ClueServiceServer) {
	s.RegisterService(&ClueService_ServiceDesc, srv)
}

func _ClueService_GameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClueServiceServer).GameStream(&clueServiceGameStreamServer{stream})
}

type ClueService_GameStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type clueServiceGameStreamServer struct {
	grpc.ServerStream
}

func (x *clueServiceGameStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clueServiceGameStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClueService_ServiceDesc is the grpc.ServiceDesc for ClueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClueService",
	HandlerType: (*ClueServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameStream",
			Handler:       _ClueService_GameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/clue.proto",
}
